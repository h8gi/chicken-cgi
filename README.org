#+TITLE: chicken cgi
#+OPTIONS: \n:t

chicken schemeでcgi

* USAGE

  keyって書いてるやつはだいたいsymbolです。

** get, post, env
   
   : (query-ref key) => value
   getとpostの変数をまとめてしまった。

   : (get-env str) => value
   環境変数はこれで(get-environment-variablesって流石に長い)

** header
   http(cgi)のヘッダを操作

   : (header-set! name . values)
   
   : (header-send)

** cookie
    
   : (cookie-ref key) => value
    
   : (cookie-set! key value [#:expires #:domain #:path])
   クッキーのセットは"header-send"の呼び出し前にしてください。

** session
   
   [[http://wiki.call-cc.org/eggref/4/http-session][http-session]] の存在に気付かないでsessionの機能をつけてしまった。   

   : (session-start session-name session-root [#:expires #:lock]) => session
   session-rootはサーバ側でセッションを管理するためのディレクトリ
   cgiに書き込み権限のあるとこで
   
   : (session-ref session key) => value
   
   : (session-set! session key value)
   : (session-delete! session key)
   セッションに変更が加わる度ファイルに書き出してる。効率悪そう。
   
   : (session-unlock session)
   sessionのlockを#tにした場合どこかでunlockしてください。

   : (session-destroy! session)
   sessionを破棄

** html
   : (html! expr ...) ;; (header-set! content-type: 'text/html)してヘッダを送信までやる

   
* EXAMPLE

#+BEGIN_SRC scheme
  #!/usr/local/bin/csi -s
  (use chicken-cgi)
  (define session (session-start '_test_session_name "session-root-path" #:expires 3600))
  (let ([a (session-ref session 'a)])
    (if a
        (session-update! session 'a (add1 a))
        (session-update! session 'a 0)))
  (html!  (<head>
           (<meta/> (@ [charset: "UTF8"]))
           (<title> (display "hello")))
          (<body>
           (display (session-ref session 'a))
           (link-to "google" "http://google.co.jp" target: "_blank")
           (<ul> (for-each (lambda (x)
                             (<li> (@ [class: "item"])
                                   (echo x)))
                  '(list of something)))))
#+END_SRC

